import pygame
import random

pygame.init()

clock = pygame.time.Clock()
fps = 60

screen_width = 864
screen_height = 936

screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Flappy Bird')

# define font
font = pygame.font.SysFont('Bauhaus', 60)

# define colours
white = (255, 255, 255)

# define game variables
ground_scroll = 0
scroll_speed = 5
flying = False
game_over = False
pipe_gap = 200 #150
pipe_frequency = 2500  # milliseconds
last_pipe = pygame.time.get_ticks() - pipe_frequency
score = 0
pass_pipe = False
level = 1
score_increment = 1
high_score = 0


# load images
background = pygame.image.load('background.png')
ground_img = pygame.image.load('ground.png')
button_img = pygame.image.load('button.png')
button_img2 = pygame.image.load('button2.png')


def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))


def reset_game():
    pipe_group.empty()
    flappy.rect.x = 100
    flappy.rect.y = int(screen_height / 2)
    return score


class Bird(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.images = []
        self.index = 0
        self.counter = 0
        self.jumping = 1
        for num in range(1, 4):
            img = pygame.image.load('dog.png')
            self.images.append(img)
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()
        self.rect.center = [x, y]
        self.vel = 0
        self.clicked = False

    def update(self):
        self.vel += -1  # change the acceleration
        if flappy.rect.bottom == 768:  # on the ground again!
            self.jumping = 0  # reset jump

        if game_over == False:
            # jump
            if pygame.mouse.get_pressed()[0] == 1 and self.clicked == False and self.jumping == 0:
                self.clicked = True
                self.vel = -15
                self.jumping = 1
            if pygame.mouse.get_pressed()[0] == 0 and self.jumping == 1:
                self.clicked = False


            # handle the animation
            self.counter += 1
            flap_cooldown = 5

            if self.counter > flap_cooldown:
                self.counter = 0
                self.index += 1
                if self.index >= len(self.images):
                    self.index = 0
            self.image = self.images[self.index]

            # rotate the bird
            self.image = pygame.transform.rotate(self.images[self.index], self.vel * -2)
        else:
            self.image = pygame.transform.rotate(self.images[self.index], -90)


class Pipe(pygame.sprite.Sprite):
    def __init__(self, x, y, position):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load('pipe.png')
        self.rect = self.image.get_rect()
        # position 1 is from the top, -1 is from the bottom
        if position == 1:
            self.image = pygame.transform.flip(self.image, False, True)
            self.rect.bottomleft = [x, y - int(pipe_gap / 2)]
        if position == -1:
            self.rect.topleft = [x, y + int(pipe_gap / 2)]

    def update(self):
        self.rect.x -= scroll_speed
        if self.rect.right < 0:
            self.kill()


class Button():
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

    def draw(self):

        action = False

        # get mouse position
        pos = pygame.mouse.get_pos()

        # check if mouse is over the button
        if self.rect.collidepoint(pos):
            if pygame.mouse.get_pressed()[0] == 1:
                action = True

        # draw button
        screen.blit(self.image, (self.rect.x, self.rect.y))

        return action

class Button2():
    def __init__(self, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

    def draw(self):

        action = False

        # get mouse position
        pos = pygame.mouse.get_pos()

        # check if mouse is over the button
        if self.rect.collidepoint(pos):
            if pygame.mouse.get_pressed()[0] == 1:
                action = True

        # draw button
        screen.blit(self.image, (self.rect.x, self.rect.y))

        return action

bird_group = pygame.sprite.Group()
pipe_group = pygame.sprite.Group()

flappy = Bird(100, int(screen_height / 2))

def main():
    global high_score, level, pipe_group, flappy, background, ground_scroll, score, game_over, flying, last_pipe, pass_pipe

    bird_group.add(flappy)

    # create restart button instance
    button = Button(screen_width // 2 - 50, screen_height // 2 - 100, button_img)
    button2 = Button2(screen_width // 2 + 290, screen_height // 2 + 245, button_img2)

    run = True
    while run:

        clock.tick(fps)

        # draw background
        screen.fill("black")

        screen.blit(background, (0, 0))

        bird_group.draw(screen)
        bird_group.update()
        pipe_group.draw(screen)

        # draw the ground
        screen.blit(ground_img, (ground_scroll, 768))
        pass_pipe = False
        # check the score
        if len(pipe_group) > 0:
            if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.left\
                    and bird_group.sprites()[0].rect.right < pipe_group.sprites()[0].rect.right \
                    and pass_pipe == False:
                pass_pipe = True
            if pass_pipe == True:
                if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.right:
                    score += 1
                    pass_pipe = False
                if score > high_score:
                    high_score = score
                if bird_group.sprites()[0].rect.left > pipe_group.sprites()[0].rect.right:
                    pass_pipe = False


        draw_text(str(score), font, white, int(screen_width / 2), 20)
        score_text = font.render(f'High Score: {high_score}', True, (255, 255, 255))
        screen.blit(score_text, (10, 10))

        # look for collision
        if pygame.sprite.groupcollide(bird_group, pipe_group, False, False) or flappy.rect.top < 0:
            game_over = True

        # check if bird has hit the ground
        if flappy.rect.bottom >= 768:
            flappy.rect.bottom = 765

        if game_over == False:
            if button2.draw() == True:
                from MainMenu import main_menu
                main_menu()

        if game_over == False and flying == True:

            # generate new pipes
            time_now = pygame.time.get_ticks()
            if time_now - last_pipe > pipe_frequency:
                pipe_height = random.randint(-100, 100)
                btm_pipe = Pipe(screen_width, int(screen_height / 1.8) + pipe_height, -1)
                pipe_group.add(btm_pipe)
                last_pipe = time_now

            # draw and scroll the ground
            ground_scroll -= scroll_speed
            if abs(ground_scroll) > 35:
                ground_scroll = 0

            pipe_group.update()

        # check for game over and reset
        if game_over == True:
            background = pygame.image.load('gameover.png')
            screen.blit(background,(-28,0))
            if button.draw() == True:
                game_over = False
                score = reset_game()
                pass_pipe = False
                background = pygame.image.load('background.png')
            if button2.draw() == True:
                from MainMenu import main_menu
                main_menu()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.MOUSEBUTTONDOWN and flying == False and game_over == False:
                flying = True


        pygame.display.update()

    pygame.quit()
